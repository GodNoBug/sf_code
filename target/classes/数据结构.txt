数据结构是计算机存储、组织数据的方式

1.线性结构
    (数组、链表、栈、队列、哈希表)
    线性表是具有n个相同元素类型的优先序列(n≥0)
    数组是一种顺序存储的线性表,所有元素的内存地址是连续的.致命缺点,无法修改容量.
    动态数组有明显的缺点:
    - 可能会造成内存空间的大量浪费,扩容的剩余部分可能永远用不完全.
    链表是一种链式存储的线性表,所有元素的内存地址不一定是连续的

2.树型结构
    (二叉树、AVL树、红黑树、堆、Trie、赫夫曼树、并查集)
    层数从1开始
    满二叉树: 最后一层节点的度为0,其他节点的度都为2
    完全二叉树: 对节点从上至下从左至右,其所有编号都能与相同高度的满二叉树的编号对应
3.图形结构
    (邻接矩阵、邻接表)

/**
 * 图由顶点(vertex)和边(edge)组成,通常表示为G=(V,E)
 * G表示一个图,V是顶点集,E是边集
 * 顶点集V有穷且非空
 * 任意两个顶点之间都可以用边来表示它们之间的关系,边集E可以是空的
 * <p>
 * 有向图(Directed Graph),具有明确标明方向,不会随意方向
 * 有向无环图 (Directed Acyclic Graph,简称DAG):
 * -若有一个有向图,从任意顶点出发无法经过若干条边回到顶点,那么它就是一个有向五环图
 * <p>
 * 出度、入度适用于有向图
 * -出度: 一个顶点的出度为x,是指由x条边以该顶点为起点
 * -入度: 一个顶点的入度为x,是指由x条边以该顶点为终点
 *
 * 无向图(Undirected Graph): 边是无方向的
 * 混合图(Mixed Graph):边可能是有向的也可能是无向的
 *
 * 平行边:
 * - 在无向图中,关联一对顶点的无向边如果多于1条,则称这些边为平行边
 * - 在有向图中,关联一对顶点的有向边如果多于1条,并且它们的方向相同,则称这些边为平行边
 *
 * 多重图(Multigraph)
 * - 有平行边或者有自环的图
 * 简单图(Simple Graph)
 * - 既没有平行边也不没有自环的图
 * - 课程讨论和面试基本都是简单图
 * 无向完全图(Undirected Complete Graph)
 * - 无向完全图的任意两个顶点之间都存在边
 * - n和顶点的完全无向图由n(n-1)/2条边
 * 有向完全图(Directed Complete Graph)
 * - 有向完全图的任意顶点之间都存在方向相反的两条边
 * - n个顶点的有向完全图由n(n-1)条边
 * - 稠密图: 边树接近于或完全等于完全图
 * - 稀疏图: 边数远远少于完全图
 *
 * 有权图(Weighted Graph)
 * 有权图的边可以拥有权值(Weight)
 *
 * 连通图(Connected Graph)
 * - 如果顶点x和y之间存在可相互抵达的路径(直接或间接的路径),则称x和y是连通的
 * - 如果无向图G中任意2个顶点都是连通的,则称G为连通图.
 * 连通分量
 * - 连通分量: 无向图的极大连通子图
 * - 连通图只有一个连通分量,即其自身;非连通的无向图有多个连通分量
 * 强连通图
 * - 如果有向图G中任意2个顶点都是连通的,则称为G为强连通图
 * 强连通分量
 * - 强连通分量:有向图的极大强连通子图
 * - 强连通图只有一个强连通分量,即其自身;非强连通的有向图有多个强连通分量
 */

四则运算的表达式可以分3种
1.前缀表达式,又称为波兰表达式. 拿运算符后面两个数进行运算的表达式.
2.中缀表达式
3.后缀表达式,又称为逆波兰表达式. 拿运算符前面两个数进行运算的表达式
对中缀表达式的计值，并非按运算符出现的自然顺序来执行其中的各个运算，而是根据算符间的优先关系来确定运算的次序，此外，还应顾及括号规则。因此，要从中缀表达式直接产生目标代码一般比较麻烦。

如果将表达式的操作数作为叶子节点,运算符作为父节点(假设只是四则运算)
这些节点刚好可以组成一颗二叉树
比如表达式: A/B + C*D -E

如果对这棵二叉树进行遍历
前序遍历
-+/AB*CDE  - 刚好就是前缀表达式(波兰表达式)
中序遍历
A/B+C*D-E  - 刚好就是中缀表达式
后续遍历
AB/CD*+E-  - 刚好就是后缀表达式(逆波兰表达式)

            -
          /   \
         +     E
       /   \
      /     *
     / \   / \
    A   B C   D