package find.fibonacci;
// 二分查找版本A的效率仍有改进余地,因为不难发现转向左/右分支前的关键代码比较次数不等,而递归深度却相同
// 二分查找整个查找过程中,在任意一个位置上,如果要决定是向左或者是向右深入的话,其实我们所比较的次数是不等的.版本A中,向左侧需要比较1次.向右侧需要2次比较
// 若能通过递归深度的不均衡,对转向成本的不均衡进行补偿平均查找长度应能进一步缩短
// 比如,若设n=fib(k)-1,则可取mi=fib(k-1)-1 [n]
// 于是,前、后子向量的长度分别为fib(k-1)-1、fib(k-2)-1
public class FibonacciFind {
}
