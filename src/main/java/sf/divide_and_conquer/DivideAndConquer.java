package sf.divide_and_conquer;

import org.junit.Test;

import javax.swing.text.TabableView;

// 分治,也就是分而治之.它的一般步骤是
//  1.将原问题分解成若干个规模较小的子问题(子问题和原问题的结构一样,只是规模不一样)
//  2.子问题又不断分解成规模更小的子问题,直到不能再分解(直到可以轻易计算出子问题的解)
//  3.利用子问题的解推导出原问题的解
//  因此,分治很适合用递归
//  需要注意的是: 子问题之间是相互独立的.[分解出来的子问题有重叠关系,那么考虑动态规划]

//  分治的应用
//  1. 快速排序
//  2. 归并排序
//  3. Karatsuba算法(大数乘法)
public class DivideAndConquer {


    // 主定理
    // 分治策略通常遵守一种通用模式
    // 1.解决规模为n的问题,分解成a个规模为n/b的子问题,然后再O(n^d)时间内将子问题的解合并起来
    // 2.算法运行时间为: T(n)=a*T(n/b)+O(n^d), a>0 ,b>1,d≥0
    //   - d>logb(a),T(n)=O(n^d)
    //   - d=logb(a),T(n)=O(n^d*logn)
    //   - d<logb(a),T(n)=O(n^(logb(a)))

    // 比如归并排序的运行时间是: T(n)=2*T(n/2)+O(n),a=2,b=2,d=1,所以T(n) = O(nlogn)

    // 思考: 为什么有些问题采取分治策略后,性能会有所提升


}
